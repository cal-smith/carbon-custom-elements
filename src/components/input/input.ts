import settings from 'carbon-components/es/globals/js/settings';
import { customElement, LitElement, html, property } from 'lit-element';
import WarningFilled16 from '@carbon/icons/lib/warning--filled/16';
import styles from './input.scss';

const { prefix } = settings;

/**
 * Supported input types.
 *
 * For this component we only support textual types
 */
export enum INPUT_TYPE {
  EMAIL = 'email',
  PASSWORD = 'password',
  TEL = 'tel',
  TEXT = 'text',
  URL = 'url',
}

/**
 * Input element. Supports all the usual attributes for textual input types
 */
@customElement(`${prefix}-input`)
export default class BXInput extends LitElement {
  @property()
  autocomplete = '';

  @property({ type: Boolean })
  autofocus = false;

  @property({ type: Boolean })
  disabled = false;

  @property()
  form = '';

  @property({ type: Boolean })
  invalid = false;

  @property()
  list = '';

  @property()
  name = '';

  @property()
  pattern = '';

  @property()
  placeholder = '';

  @property({ type: Boolean })
  readonly = false;

  @property({ type: Boolean })
  required = false;

  @property()
  type = INPUT_TYPE.TEXT;

  @property()
  value = '';

  render() {
    const invalidIcon = WarningFilled16({ class: 'bx--text-input__invalid-icon' });

    return html`
      <div class="${prefix}--text-input__field-wrapper">
        ${this.invalid ? invalidIcon : null}
        <input
          ?autocomplete="${this.autocomplete}"
          ?autofocus="${this.autofocus}"
          class="${prefix}--text-input"
          ?data-invalid="${this.invalid}"
          ?disabled="${this.disabled}"
          form="${this.form}"
          invalid="${this.invalid}"
          list="${this.list}"
          name="${this.name}"
          pattern="${this.pattern}"
          placeholder="${this.placeholder}"
          ?readonly="${this.readonly}"
          ?required="${this.required}"
          type="${this.type}"
          value="${this.value}"
        />
      </div>
    `;
  }

  static styles = styles; // `styles` here is a `CSSResult` generated by custom WebPack loader
}
